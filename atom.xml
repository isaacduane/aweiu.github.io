<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿伟的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-18T08:53:32.816Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>余阿伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>喜马拉雅黑科技——无卡顿网页播放器</title>
    <link href="http://yoursite.com/2016/04/18/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85%E9%BB%91%E7%A7%91%E6%8A%80%E2%80%94%E2%80%94%E6%97%A0%E5%8D%A1%E9%A1%BF%E7%BD%91%E9%A1%B5%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>http://yoursite.com/2016/04/18/喜马拉雅黑科技——无卡顿网页播放器/</id>
    <published>2016-04-18T07:04:55.000Z</published>
    <updated>2016-04-18T08:53:32.816Z</updated>
    
    <content type="html">&lt;p&gt;　　某天上班，偶然打开网页版的喜马拉雅，随手点了首推荐音频。。。于是伴随着动词大词，动词大词，继续逛着它的首页。&lt;br&gt;　　一个不小心，又点进了老郭的相声，哎，还是木有更新，不过老段子也可以再听听，正当老夫要点播的时候，突然！哎呀！卧槽！卧槽！牛逼啊！我都逛了这么多页面了，耳机里的”动词大词”竟然连顿都没打，当时还打开了一下本地播放器，以为是它播放的音乐。&lt;br&gt;　　详细情形是这样的：我在喜马拉雅的&lt;strong&gt;a页面&lt;/strong&gt;播放了音乐，然后又去&lt;strong&gt;b页面&lt;/strong&gt;，&lt;strong&gt;c页面&lt;/strong&gt;，音乐却并没有卡顿现象，稳如死狗！注意，这里说的是连卡顿都没有，不是说跳到别的页面会继续播放。&lt;br&gt;　　国内的在线音乐平台有很多，实现喜马拉雅的这种哥还是头一回见啊。大部分都是采取的本地缓存音乐进度，跳到别的页面再读取进度，继续播放，但切页面的时候肯定是会有卡顿的。所以这里给喜马拉雅的用户体验32个赞！&lt;br&gt;　　那么问题来了，这种网页播放器是如何实现的？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;　　简单点说，其实就是使用了html5的api:&lt;a href=&quot;http://www.cnblogs.com/flash3d/archive/2013/10/23/3384823.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;histoyr.pushstate&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面中，所有的a标签，js对其做了点击事件的拦截，如果是支持该API的浏览器不会发生跳转，而是通过ajax请求该链接，返回结果是一串类似于如下的json:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;html&amp;quot;:&amp;quot;&amp;lt;div class=&amp;apos;xxx&amp;apos;&amp;gt;xxx&amp;lt;/div&amp;gt;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;quot;title&amp;quot;:&amp;quot;页面标题&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;通过js将html里的内容插入到页面的指定容器中去&lt;/li&gt;
&lt;li&gt;使用histoyr.pushstate，强势插入一条浏览历史&lt;br&gt;　　于是当前浏览器的页面内容会被更新,访问地址会变成该a标签的链接，页面标题变成返回结果中的title。所以看起来就会和跳转页面一样，但实际上页面并未发生过任何跳转，至始至终都是在一个页面中进行各种ajax请求而已，所以歌曲的播放当然不会卡顿了。&lt;br&gt;　　好了，揭秘完毕！小伙伴们是不是也可以使用上述步骤来创建自己的单页应用了呢？别急，待我先喷一喷这种单页应用的缺点先！&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;需要后端配合渲染页面。区分ajax请求和浏览器请求，即如果是ajax请求页面，则返回上述json，否则正常返回整个页面内容以供跳转。&lt;/li&gt;
&lt;li&gt;需要js/css路由(某些框架就可以实现)或初次载入即加载完所有js/css，并解决冲突。&lt;br&gt;　　因为ajax请求返回的仅仅是html部分，没有也不能够包含页面对应的js/css，一旦包含了，很可能就会形成全局变量冲突，事件冲突，样式混乱等问题，请求的页面越多，问题越严重！这对于前端的小伙伴来说真是日了狗了。。没法再轻松愉快的维护各自页面各自的静态资源了，写着a页面还得操着b页面的心，遵循一堆约定。而且本人也比较反感因为使用了某些框架（比如:react.js）就要放弃html各种纯天然的写法，毕竟原生态的，才是我们最熟悉的。&lt;/li&gt;
&lt;li&gt;感觉两条太少了，凑个数行不。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&quot;tip&quot;&gt;　&lt;br&gt;    我知道，看到这里肯定有人想喷我了。时代在进步，现在前端各种mvc框架完全能够实现这种需求，为毛还嫌麻烦？我想说，每种框架都&lt;br&gt;有它的适用情景，也都有值得我们学习的地方，but！每个团队的开发模式，编程水平，项目时间都不同，适合自己的才是最好的。并且现代&lt;br&gt;浏览器的性能，人们的带宽都取得了长足的进步，有时候为了一点性能提升而要改变适合整个团队的编码习惯，是不是有点舍近求远了呢？&lt;br&gt;&lt;/div&gt;&lt;br&gt;　　而优点当然也有了，就1条！&lt;/p&gt;
&lt;p&gt;　　太特么省流量了。因为各个页面会有很多相同部分，ajax仅返回异同部分即可，所以页面的体验会更加流畅，并可以有效减少http请求。。好像不止1条，不管了。&lt;/p&gt;
&lt;p&gt;　　那么接着html原生写法的思路，有没有一种方式能够让我们不用管前后端配合，也不用鸟静态资源路由，就像做多页站点那样无痛创建单页应用呢？相信你脑海中已经出现那个古老科技了，对！就是&lt;strong&gt;iframe&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用iframe将页面包起来&lt;/li&gt;
&lt;li&gt;播放器给挪到外面去&lt;br&gt;　　　　这样iframe中的页面爱咋跳咋跳，同样也不会影响到外面播放器的运行&lt;/li&gt;
&lt;li&gt;使用html5的另一个API:history.replacestate改改浏览器地址，改改标题&lt;/li&gt;
&lt;li&gt;iframe的跳转又天然会插入一条浏览历史&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简直完美！&lt;/p&gt;
&lt;p&gt;　　利用以上原理，鄙人写了一个插件—— &lt;a href=&quot;https://github.com/328080339/JsLibs/wiki/singlePage.js%28%E6%9B%B4%E8%87%AA%E7%84%B6%E5%9C%B0%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;singlePage.js(点我查看文档)&lt;/a&gt;&lt;br&gt;　　帮助大家更自然地创建单页应用，没有那么多的屁事儿，你要做的仅仅只有一步，引入它！&lt;br&gt;　　&lt;a href=&quot;http://awei.oss-cn-shenzhen.aliyuncs.com/singlePage/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看演示(仿喜马拉雅播放器)&lt;/a&gt;
　　&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;　　某天上班，偶然打开网页版的喜马拉雅，随手点了首推荐音频。。。于是伴随着动词大词，动词大词，继续逛着它的首页。&lt;br&gt;　　一个不小心，又点进了老郭的相声，哎，还是木有更新，不过老段子也可以再听听，正当老夫要点播的时候，突然！哎呀！卧槽！卧槽！牛逼啊！我都逛了这么多页面了，耳机里的”动词大词”竟然连顿都没打，当时还打开了一下本地播放器，以为是它播放的音乐。&lt;br&gt;　　详细情形是这样的：我在喜马拉雅的&lt;strong&gt;a页面&lt;/strong&gt;播放了音乐，然后又去&lt;strong&gt;b页面&lt;/strong&gt;，&lt;strong&gt;c页面&lt;/strong&gt;，音乐却并没有卡顿现象，稳如死狗！注意，这里说的是连卡顿都没有，不是说跳到别的页面会继续播放。&lt;br&gt;　　国内的在线音乐平台有很多，实现喜马拉雅的这种哥还是头一回见啊。大部分都是采取的本地缓存音乐进度，跳到别的页面再读取进度，继续播放，但切页面的时候肯定是会有卡顿的。所以这里给喜马拉雅的用户体验32个赞！&lt;br&gt;　　那么问题来了，这种网页播放器是如何实现的？&lt;br&gt;
    
    </summary>
    
    
      <category term="喜马拉雅播放器" scheme="http://yoursite.com/tags/%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
      <category term="单页应用" scheme="http://yoursite.com/tags/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8/"/>
    
      <category term="singlePage" scheme="http://yoursite.com/tags/singlePage/"/>
    
  </entry>
  
</feed>
